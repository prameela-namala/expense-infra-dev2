pipeline {
    agent {
        label 'AGENT-1'
    }
    options {
        // Timeout counter starts BEFORE agent is allocated
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        //retry(1)
    }
    parameters {
        
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Select Action')

    
    }
    stages {
        stage('Init and plan') {
            steps {
                sh "terraform init reconfigure"
                sh "cd 10-vpc"
                //sh "sleep 10"
            }
            steps{
                withAWS(region: 'us-east-1' , credentials: 'as-creds'){
                    sh 'terraform plan -out=tfplan'
                    sh 'cd 20-sg'
                }
            }
        }
        // stage('Test') {
        //     steps { 
        //         sh "echo this is test"
        //     }
        // }
        // stage('Deploy') {
        //     when{

        //         expression {env.GIT_BRANCH != 'origin/main'}
        //     }
        //     steps {
        //         sh "echo this is deploy"
        //         //error "pipeline failed"
        //     }
        // }
        // stage('print params'){
        //     steps{
        //         echo "Hello ${params.PERSON}"

        //         echo "Biography: ${params.BIOGRAPHY}"

        //         echo "Toggle: ${params.TOGGLE}"

        //         echo "Choice: ${params.CHOICE}"

        //         echo "Password: ${params.PASSWORD}"
        //     } 
        // }

       
    

    post {
        always {
            echo "this section runs always"
            deleteDir()
        }

        success {

            echo "this section runs when pipeline success"
        }

        failure {
            echo "this section runs when pipeline fails"
        }
    }
}
