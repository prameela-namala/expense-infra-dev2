pipeline {
    agent {
        label 'AGENT-1'
    }
    options{
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }

    parameters {
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Select Action')
    }

    stages {
        stage('Init and Plan') {
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-creds') {
                    sh """
                        cd 20-sg
                        terraform init -reconfigure
                        terraform plan -out=tfplan
                    """
                }
            }
        }

        stage('Apply or Destroy') {
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-creds') {
                    sh """
                        cd 20-sg
                        if [ ${params.ACTION} == 'apply' ]
                        then
                            terraform apply -auto-approve tfplan
                        elif [ ${params.ACTION} == 'destroy' ]
                        then
                            terraform destroy -auto-approve
                        fi
                    """
                }
            }
        }

        // Destroy Resources stage with a for loop to destroy in reverse order
        stage('Destroy Resources') {
            when {
                expression { params.ACTION == 'destroy' }
            }
            steps {
                script {
                    // List of resource jobs that need to be destroyed
                    def resources = [
                        '10-vpc', 
                        '30-bastion', 
                        '40-rds', 
                        '50-eks', 
                        '80-ecr', 
                        '60-acm', 
                        '70-alb', 
                        '90-cdn'
                    ]
                    
                    // Use a for loop to iterate through the resources in reverse order
                    for (int i = resources.size() - 1; i >= 0; i--) {
                        def resource = resources[i]
                        // Trigger the respective resource job with the ACTION as "destroy"
                        build job: resource, parameters: [string(name: 'ACTION', value: "destroy")], wait: false
                    }
                }
            }
        }

        stage('Parallel') {
            when {
                expression { params.ACTION == 'apply' }
            }
            parallel {
                stage('Bastion') {
                    steps {
                        build job: '30-bastion', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
                stage('RDS') {
                    steps {
                        build job: '40-rds', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
                stage('EKS') {
                    steps {
                        build job: '50-eks', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
                stage('ECR') {
                    steps {
                        build job: '80-ecr', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
            }
        }

        stage('Sequential') {
            when {
                expression { params.ACTION == 'apply' }
            }
            stages {
                stage('ACM') {
                    steps {
                        build job: '60-acm', parameters: [string(name: 'ACTION', value: "apply")]
                    }
                }
                stage('ALB') {
                    steps {
                        build job: '70-alb', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
                stage('CDN') {
                    steps {
                        build job: '90-cdn', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
            }
        }
    }

    post {
        always {
            echo "This sections runs always"
            deleteDir()
        }
        success {
            echo "This section runs when pipeline success"
        }
        failure {
            echo "This section runs when pipeline failure"
        }
    }
}
